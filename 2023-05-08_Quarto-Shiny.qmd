---
title: "Quarto & Shiny"
format: 
  html:
    page-layout: custom
server: shiny
---

```{r, message = FALSE}
#| context: setup
#| include: false

library(chartmusicdata)
library(shiny)
library(tidyverse)

artists <- songs2000 %>%
  count(artist, sort = TRUE) %>%
  slice_head(n = 10) %>%
  pull(artist)

songsdata <- songs2000 %>%
  filter(artist %in% artists)
```


```{r ui}

fluidPage(
  
  titlePanel("Dynamisches User Interface, Diagramm herunterladen"),
  
  sidebarLayout(
    
    sidebarPanel(
      selectInput(inputId = "bandname", label = "Künstler / Band auswählen",
                  choices = artists, selected = "Drake"),
      selectInput(inputId = "song", label = "Song zur Hervorhebung auswählen",
                  choices = NULL)   # choices werden dynamisch ausgefüllt
    ),
    
    mainPanel(
      h2("Daten aus songs2000"),
      plotOutput(outputId = "bandplot"),
      downloadButton("download")
      # downloadLink("download")  # Alternative
      # anpassen mit Argumenten class und icon
    )
  )
)
```

```{r server}
#| context: server

output$bandplot <- renderPlot({

plotdata_full <- songsdata %>% 
  filter(artist == input$bandname)

plotdata_highlight <- plotdata_full %>% 
  filter(song == input$song)

ggplot(plotdata_full, aes(x = year_month, y = indicativerevenue)) +
  geom_point(size = 1.5, color = "darkgrey") +
  geom_point(data = plotdata_highlight, size = 2.5, color = "darkblue") +
  labs(title = paste("Songs von", input$bandname),
       subtitle = paste("Hervorgehobener Song:", input$song),
       x = "Monat und Jahr",
       y = "Indicative Revenue in USD") +
  scale_x_discrete(labels = function(x) {
    x <- sort(unique(x))
    x[seq(2, length(x), 2)] <- ""
    x
  }) +
  scale_y_continuous(labels = scales::label_dollar(scale = 1000)) +
  theme_bw(base_size = 14) +
  theme(axis.text.x = element_text(angle = 90))
  
})

# observeEvent(band(), {   # veraltet; observe ist flexibler
observe({
  x = input$bandname        # deklariert Abhängigkeit; Rückgabewert wird ignoriert
  songs <- songsdata %>% 
    filter(artist == input$bandname) %>% 
    pull(song)
  updateSelectInput(inputId = "song", choices = songs)
})

output$download <- downloadHandler(
  filename = function() {
    paste0(input$bandname, "-", input$song, ".png")
  },
  content = function(file) {
    ggsave(file, plot = last_plot(), width = 10, height = 6)
  }
)

```
