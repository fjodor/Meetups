---
title: "Putting the Fun <br>in Functional Programming"
title-slide-attributes: 
  data-background-image: libs/_Images/2025-07-Sara.png
  data-background-position: top
  data-background-size: 40%
  data-background-opacity: "0.5"
  data-background-color: "#F9F9F9"
author: "Wolf Riepl"
date: 2025-07-25
format: 
  revealjs:
    theme: default
    highlight-style: a11y
execute:
  echo: false
  eval: true
  freeze: auto
  warning: false
  message: false
callout-appearance: simple
---

## Creating Many Graphics

```{r}
#| include: false
#| message: false

library(knitr)
library(tidyverse)
library(fontawesome)
library(chartmusicdata)

Sys.setenv(LANG="en")
# Sys.setenv(LANG="de")
Sys.setlocale("LC_TIME", "en_GB.utf8")
```

::: {style="font-size: 2.2rem"}

Why work code-based in the first place?

```{r ref.label = "albumchart"}
#| echo: false
#| eval: true
```

:::


## Creating Many Graphics

:::: columns
::: {.column style="width: 72%"}

```{r, ref.label = "albumchart"}
#| echo: true
#| eval: false
```

:::

::: {.column style="width: 28%"}

```{r}
#| echo: false
#| eval: true
#| fig-height: 12
#| fig-width: 9

p <- albums2000 %>% 
  filter(year == 2020) %>%
  filter(!(artist %in% c(
    "Original Soundtrack", "Various Artists"))) %>%
  count(artist) %>% 
  slice_max(n, n = 7) %>% 
  ggplot(aes(x = n, 
             y = fct_rev(fct_inorder(artist)))) +
  geom_point(size = 5, col = "blue") +
  ggthemes::theme_wsj(base_size = 24) +
  labs(title = "Albums in 2020",
       subtitle = "Most Entries",
       y = "", caption = "Source: chart2000.com") +
  scale_x_continuous(limits = c(0, NA))

p
```

:::
::::


## Creating Many Graphics

:::: columns
::: {.column style="width: 72%"}

```{r "albumchart"}
#| echo: true
#| eval: false
#| code-line-numbers: "2|11"

albums2000 %>% 
  filter(year == 2020) %>%
  filter(!(artist %in% c(
    "Original Soundtrack", "Various Artists"))) %>%
  count(artist) %>% 
  slice_max(n, n = 7) %>% 
  ggplot(aes(x = n, 
             y = fct_rev(fct_inorder(artist)))) +
  geom_point(size = 5, col = "blue") +
  ggthemes::theme_wsj(base_size = 18) +
  labs(title = "Albums in 2020",
       subtitle = "Most Entries",
       y = "", caption = "Source: chart2000.com") +
  scale_x_continuous(limits = c(0, NA))

```

:::

::: {.column style="width: 28%"}

```{r}
#| echo: false
#| eval: true
#| fig-height: 12
#| fig-width: 9

p
```

:::
::::


## Same Chart - other years

Easy way:

::: incremental

1. Copy & paste
2. Edit year manually
3. Rinse and repeat ...

That's not elegant, however ...

- DRY
- **D**on't **R**epeat **Y**ourself!
- Better: ***Write Functions***
:::


## Turning Code into a Function

```{r, ref.label = "albumchart"}
#| echo: true
#| eval: false
```


## Turning Code into a Function

```{r my-plot}
#| echo: true

my_plot <- function(Year) {
  albums2000 %>% 
    filter(year == Year) %>%
    filter(!(artist %in% c(
      "Original Soundtrack", "Various Artists"))) %>%
    count(artist) %>% 
    slice_max(n, n = 7) %>% 
    ggplot(aes(x = n, 
               y = fct_rev(fct_inorder(artist)))) +
    geom_point(size = 5, col = "blue") +
    ggthemes::theme_wsj() +
    labs(title = paste("Albums in", Year),
         subtitle = "Most Entries",
         y = "", caption = "Source: chart2000.com") +
    scale_x_continuous(limits = c(0, NA))
}
```


## Turning Code into a Function

```{r, ref.label = "my-plot"}
#| echo: true
#| code-line-numbers: "1|3|12"

```


## Turning Code into a Function

:::: columns
::: {.column style="font-size: 1.9rem; width: 60%"}

```{r, ref.label="my-plot"}
#| echo: true
```

::: incremental

- Much better!
- Still some redundancy, esp. for many charts ...

:::
:::

::: {.column style="width: 40%"}

```{r}
#| echo: true

my_plot(2019)
my_plot(2018)

```

:::
::::


## Applying the Function Elegantly

One line of code - many charts!

### Base R

```{r}
#| echo: true
#| eval: false

lapply(2000:2020, my_plot)
```

::: fragment

<br>

### tidyverse

```{r}
#| echo: true
#| eval: false

# Like lapply
purrr::map(2000:2020, my_plot)

# Suppress output in console - charts only
purrr::walk(2000:2020, ~print(my_plot(.)))

# Show progress bar
purrr::walk(2000:2020, ~print(my_plot(.)), .progress = TRUE)
```

:::


## Creating Many Statistical Models

:::: columns
::: column

```{r, out.width = "80%", out.height = "80%"}
include_graphics("libs/_Images/Coding-College.png")
```

:::

::: column

```{r, out.width = "70%", out.height = "70%"}
include_graphics("libs/_Images/Coding-Real-Job.png")
```
:::
::::

::: {style="font-size: 1.6rem"}
<https://me.me/i/coding-while-learning-it-at-college-coding-for-a-project-d004e7c838784aecbf821cd76b38ff5b>  
and <https://memecenter.com>
:::


## Creating Many Statistical Models

```{r}

top_artists <- topalbums %>% 
  filter(!(artist %in% c("Original Soundtrack", "Original Cast"))) %>% 
  count(artist) %>% 
  filter(n > 9) %>% 
  pull(artist)

top_artists <- topalbums %>% 
  filter(artist %in% top_artists)

top4 <- top_artists %>% 
  count(artist) %>% 
  slice_max(order_by = n, n = 4, with_ties = FALSE) %>% 
  pull(artist)

# Das erfolgreichste Album jeder Band / jedes KÃ¼nstlers beschriften

plot_labels <- topalbums %>% 
  filter(artist %in% top4) %>% 
  group_by(artist) %>% 
  filter(final_score == max(final_score)) %>% 
  rename(label = name)

plot_data <- top_artists %>% 
  left_join(plot_labels) %>% 
  mutate(label = str_wrap(label, width = 19))

plot <- plot_data %>% 
  filter(artist %in% top4) %>% 
  ggplot(aes(x = year, y = final_score, label = label)) +
  geom_point() +
  # geom_text(aes(label = label), nudge_y = 60,
  #           nudge_x = 10, check_overlap = TRUE) +
  ggrepel::geom_text_repel(nudge_y = 7, nudge_x = 10,
                           arrow = arrow(), col = "darkblue") +
  facet_wrap(~ artist, nrow = 2) +
  scale_y_continuous(limits = c(0, 70)) +
  labs(x = "Year", y = "Score",
       title = "Top 4 Bands / Artists with most Albums in Top 3000") +
  theme_bw(base_size = 14) 

plot
```


## Creating Many Statistical Models

### Task: Predict album success in Europe <br> from success in U.S.

:::: columns
::: {.column style="width: 30%"}

```{r}
include_graphics("libs/_Images/logo-dplyr.png")
```

:::

::: {.column style="width: 70%; font-size: 2rem"}

- Simple linear model: **`raw_eur ~ raw_usa`**
- Separate model for each band / artist
- Usual, complicated way:
  + filter data manually for each subgroup
  + create separate model for each subgroup

- Elegant way?
- Output format well suited for further processing?
- No *model summaries* in console!

:::
::::


## Creating Many Statistical Models

#### Step 1: Create "nested" dataset

:::: columns
::: column

```{r, echo = TRUE}
top_mod <- top_artists %>% 
  nest_by(artist)
head(top_mod)
```

:::

::: column

```{r, echo = TRUE}
top_mod$data[[1]] %>%  # AC/DC
  select(1:3) %>%      # Columns
  slice(1:3)           # Rows
```

* Dataset contains **1 Row per Band**
* Column ***data*** contains **1 dataset per cell**
* This enables us to continue `elegantly`

:::
::::


## Thank you - enjoy R! {.smaller}

```{r}
#| echo: false
#| fig-align: "center"

# out-width: "200%"
# out-height: "200%"

include_graphics("libs/_Images/2025-07-Sara.png")
```

:::: columns
::: column

**Wolf Riepl  
LinkedIn, Xing  
<https://statistik-dresden.de/>**  
:::

::: column

**Youtube: StatistikinDD  
https://www.facebook.com/statistikdresden**

:::
::::
