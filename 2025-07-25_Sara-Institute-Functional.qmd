---
title: "Putting the Fun <br>in Functional Programming"
title-slide-attributes: 
  data-background-image: libs/_Images/2025-07-Sara.png
  data-background-position: top
  data-background-size: 40%
  data-background-opacity: "0.5"
  data-background-color: "#F9F9F9"
institution: "Wolf Riepl Trainer for R Programming"
date: 2025-07-25
format: 
  revealjs:
    theme: default
    highlight-style: a11y
execute:
  echo: false
  eval: true
  freeze: auto
  warning: false
  message: false
callout-appearance: simple
---

## Creating Many Graphics

```{r}
#| include: false
#| message: false

library(knitr)
library(tidyverse)
library(fontawesome)
library(chartmusicdata)

Sys.setenv(LANG="en")
# Sys.setenv(LANG="de")
Sys.setlocale("LC_TIME", "en_GB.utf8")
```

::: {style="font-size: 2.2rem"}

Why work code-based in the first place?

```{r ref.label = "albumchart"}
#| echo: false
#| eval: true
```

:::


## Creating Many Graphics

:::: columns
::: {.column style="width: 72%"}

```{r, ref.label = "albumchart"}
#| echo: true
#| eval: false
```

:::

::: {.column style="width: 28%"}

```{r}
#| echo: false
#| eval: true
#| fig-height: 12
#| fig-width: 9

p <- albums2000 %>% 
  filter(year == 2020) %>%
  filter(!(artist %in% c(
    "Original Soundtrack", "Various Artists"))) %>%
  count(artist) %>% 
  slice_max(n, n = 7) %>% 
  ggplot(aes(x = n, 
             y = fct_rev(fct_inorder(artist)))) +
  geom_point(size = 5, col = "blue") +
  ggthemes::theme_wsj(base_size = 24) +
  labs(title = "Albums in 2020",
       subtitle = "Most Entries",
       y = "", caption = "Source: chart2000.com") +
  scale_x_continuous(limits = c(0, NA))

p
```

:::
::::


## Creating Many Graphics

:::: columns
::: {.column style="width: 72%"}

```{r "albumchart"}
#| echo: true
#| eval: false
#| code-line-numbers: "2|11"

albums2000 %>% 
  filter(year == 2020) %>%
  filter(!(artist %in% c(
    "Original Soundtrack", "Various Artists"))) %>%
  count(artist) %>% 
  slice_max(n, n = 7) %>% 
  ggplot(aes(x = n, 
             y = fct_rev(fct_inorder(artist)))) +
  geom_point(size = 5, col = "blue") +
  ggthemes::theme_wsj(base_size = 18) +
  labs(title = "Albums in 2020",
       subtitle = "Most Entries",
       y = "", caption = "Source: chart2000.com") +
  scale_x_continuous(limits = c(0, NA))

```

:::

::: {.column style="width: 28%"}

```{r}
#| echo: false
#| eval: true
#| fig-height: 12
#| fig-width: 9

p
```

:::
::::


## Same Chart - other years

Easy way:

::: incremental

1. Copy & paste
2. Edit year manually
3. Rinse and repeat ...

That's not elegant, however ...

- DRY
- **D**on't **R**epeat **Y**ourself!
- Better: ***Write Functions***
:::


## Turning Code into a Function

```{r, ref.label = "albumchart"}
#| echo: true
#| eval: false
```


## Turning Code into a Function

```{r my-plot}
#| echo: true

my_plot <- function(Year) {
  albums2000 %>% 
    filter(year == Year) %>%
    filter(!(artist %in% c(
      "Original Soundtrack", "Various Artists"))) %>%
    count(artist) %>% 
    slice_max(n, n = 7) %>% 
    ggplot(aes(x = n, 
               y = fct_rev(fct_inorder(artist)))) +
    geom_point(size = 5, col = "blue") +
    ggthemes::theme_wsj() +
    labs(title = paste("Albums in", Year),
         subtitle = "Most Entries",
         y = "", caption = "Source: chart2000.com") +
    scale_x_continuous(limits = c(0, NA))
}
```


## Turning Code into a Function

```{r, ref.label = "my-plot"}
#| echo: true
#| code-line-numbers: "1|3|12"

```


## Turning Code into a Function

:::: columns
::: {.column style="font-size: 1.9rem; width: 60%"}

```{r, ref.label="my-plot"}
#| echo: true
```

::: incremental

- Much better!
- Still some redundancy, esp. for many charts ...

:::
:::

::: {.column style="width: 40%"}

```{r}
#| echo: true

my_plot(2019)
my_plot(2018)

```

:::
::::


## Applying the Function Elegantly

One line of code - many charts!

### Base R

```{r}
#| echo: true
#| eval: false

lapply(2000:2020, my_plot)
```

::: fragment

<br>

### tidyverse

```{r}
#| echo: true
#| eval: false

# Like lapply
purrr::map(2000:2020, my_plot)

# Suppress output in console - charts only
purrr::walk(2000:2020, ~print(my_plot(.)))

# Show progress bar
purrr::walk(2000:2020, ~print(my_plot(.)), .progress = TRUE)
```

:::


## Thank you - enjoy R! {.smaller}

```{r}
#| echo: false
#| fig-align: "center"

# out-width: "200%"
# out-height: "200%"

include_graphics("libs/_Images/2025-07-Sara.png")
```

:::: columns
::: column

**Wolf Riepl  
LinkedIn, Xing  
<https://statistik-dresden.de/>**  
:::

::: column

**Youtube: StatistikinDD  
https://www.facebook.com/statistikdresden**

:::
::::
